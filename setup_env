#!/bin/bash 

##############################################################
# script name : PST 
# author      : jukoo 
# Description : rapid establishment of personal environment
# Status      : On build 
##############################################################
set -o errexit 

source .coreUtil 

[[ -f arch ]]  || {
    echo "-- no-arch file detected [compile using make command ]" 
    exit 1 
}

UID_ROOT=0               # only root can execute this script 
ERR_no_ROOT=64           # exit script  if no root 
ERR_DIST_NOTFOUND=12     # exit if the current version not correspond 
HARDWARE_PLTF="x86_64"   # recommande system hardware plateform 
ERR_NOCOMP=13            # exit if hardware plateform  not recommnaded 
NO_TMPFC=14              # no temps file  created 

# check the UID user
# the script should be executed  as root 
# return  0  when UID = 0 
check_privilege () {
    [ $UID_ROOT -eq  $UID ] && {
        return $UID 
    } || {
            prompt  "you shoul be root to execute this script " 
            exit ${ERR_no_ROOT} 
    }
} 

check_privilege 

# Check the current system requirement  ps :i do it just for fun :) 
system_analysis () {
  # write the kernel version in new tmp_file 
  uname --kernel-version > tmp_file 
  #get the current hardware plateform   
  HPLT=$(uname -m) 
  # parse the tmp_file file and extract the essential information needed 
  [ -e tmp_file ] && {
   dist=$(cut -d " " -f3 tmp_file) 
  }||{
    
    echo "creating tmpFile failed " ; exit $NO_TMPFC;    
  }
   if [ $HARDWARE_PLTF == $HPLT ] ; then 
       prompt  " [ \033[1;32m  Opsys Ok  \033[0m ] "     
   else 
       exit  $ERR_NOCOMP     
   fi 
  delete_ tmp_file
}

[ $? -eq 0 ] &&   {                                                 # Root UID access 
     notify-send "[ ok ] the installation begin  please wait ..."   # send notification   
     system_analysis                                                # check  requirement 
     upd_n_upgr                                                     # update and upgrade the packge 
     file_parser                                                    # parse the target file specified 
     [ $? -eq 0 ] &&  {
        notify-send "installation successfully done"                # success alert  
    }|| {   
        exit 1                                                      # error exit 
    }
}
